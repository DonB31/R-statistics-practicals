On observe une valeur de covariance de 4005883 et un coefficient de correlation de Pearson de 0.96. On a une correlation positive.
ligneregression = lm(ORF_number ~ Genome_size)
ligneregression = lm(ORF_number ~ Genome_size)
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
View(genomes)
ligneregression = lm(ORF_number~ Genome_size)
ligneregression = lm(ORF_number~Genome_size)
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
L'unité de mesure est de l'ordre des milions de paires de bases.
## On peut calculer la relation entre ces 2 variables mais aussi le coefficient de Pearson.
```{r}
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
cov_xy = with(genomes, cov(Genome_size , ORF_number))
r_xy = with(genomes, cor(Genome_size , ORF_number))
cat(sprintf("Covariance = %.0f ; r (Pearson) = %.2f\n", cov_xy, r_xy))
ligneregression = lm(ORF_number~Genome_size)
ligneregression = lm(ORF_number~Genome_size, data = genomes)
abline(ligneregression , col="red", lwd=2)
summary(ligneregression)
abline(ligneregression , col="red", lwd=2)
summary(ligneregression)
cat(sprintf("Covariance = %.0f ; r (Pearson) = %.2f\n", cov_xy, r_xy))
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
mean_taille_sequoia = mean(taille_arbre)
ecart_type_sequoia = sd(taille_arbre)
mean_taille_sequoia = mean(taille_arbre)
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
names(data_sequoia)
hist(taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
mean_taille_sequoia = mean(taille_arbre)
ecart_type_sequoia = sd(taille_arbre)
mean_taille_sequoia = mean(data_sequoia$taille_arbre)
ecart_type_sequoia = sd(data_sequoia$taille_arbre)
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
histogramme_taille_arbre = function() { hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off()
histogramme_taille_arbre = function() { hist(data_sequoia$taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
histogramme_taille_arbre()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
dnorm(0,0,1) # On a ici x=0, mean=0 et sd=1 respectivement. Ici , x est une variable aleatoire, mean correspond à la mean de la population et sd c'est l'ecart type de la popualtion.
hist(rnorm(100,0,1), col='red')
hist(rnorm(100,0,1), col='red')
hist(rnorm(100,0,1), col='red')
hist(rnorm(100,0,1), col='red')
hist(rnorm(10000,0,1))
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
```{r, echo=FALSE}
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
## Pour trouver combien de graines en mean devraient germer, on multiplie n par p (np)
```{r}
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="salmon", main="Loi Binomiale B(100,0.8)") }
figure_loi_binomiale()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
k = seq(0,100,1)
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="salmon", main="Loi Binomiale B(100,0.8)") }
figure_loi_binomiale()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="red", main="Loi Binomiale B(100,0.8)") }
figure_loi_binomiale()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
if ( file.exists("figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ") } # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
# Chunk 2
cov_xy = with(genomes, cov(Genome_size , ORF_number))
r_xy = with(genomes, cor(Genome_size , ORF_number))
cat(sprintf("Covariance = %.0f ; r (Pearson) = %.2f\n", cov_xy, r_xy))
# Chunk 3
ligneregression = lm(ORF_number~Genome_size, data = genomes) # Nous n'avons utilisé pas attach donc faut lui preciser sur quoi on travaille.
# Chunk 4
abline(ligneregression , col="red", lwd=2)
summary(ligneregression)
# Chunk 5
cor(Genome_size , ORF_number)^2
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
# Chunk 2
cov_xy = with(genomes, cov(Genome_size , ORF_number))
r_xy = with(genomes, cor(Genome_size , ORF_number))
cat(sprintf("Covariance = %.0f ; r (Pearson) = %.2f\n", cov_xy, r_xy))
# Chunk 3
ligneregression = lm(ORF_number~Genome_size, data = genomes) # Nous n'avons utilisé pas attach donc faut lui preciser sur quoi on travaille.
# Chunk 4
abline(ligneregression , col="red", lwd=2)
summary(ligneregression)
# Chunk 5
cor(Genome_size , ORF_number)^2
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
# Chunk 2
cov_xy = with(genomes, cov(Genome_size , ORF_number))
r_xy = with(genomes, cor(Genome_size , ORF_number))
cat(sprintf("Covariance = %.0f ; r (Pearson) = %.2f\n", cov_xy, r_xy))
# Chunk 3
ligneregression = lm(ORF_number~Genome_size, data = genomes) # Nous n'avons utilisé pas attach donc faut lui preciser sur quoi on travaille.
# Chunk 4
abline(ligneregression , col="red", lwd=2)
summary(ligneregression)
# Chunk 5
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
names(data_sequoia)
hist(taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
hist(data_sequoia$taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
mean_taille_sequoia = mean(data_sequoia$taille_arbre)
ecart_type_sequoia = sd(data_sequoia$taille_arbre)
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
histogramme_taille_arbre = function() { hist(data_sequoia$taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
histogramme_taille_arbre()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
```{r, echo=FALSE}
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
## Pour trouver combien de graines en mean devraient germer, on multiplie n par p (np)
```{r}
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="red", main="Loi Binomiale B(100,0.8)") }
figure_loi_binomiale()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ") } # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="red", main="Loi Binomiale B(100,0.8)") }
figure_loi_binomiale()
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ") } # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
install.packages(here)
install.packages('here')
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
names(data_sequoia)
hist(data_sequoia$taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
mean_taille_sequoia = mean(data_sequoia$taille_arbre)
ecart_type_sequoia = sd(data_sequoia$taille_arbre)
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
histogramme_taille_arbre = function() { hist(data_sequoia$taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
histogramme_taille_arbre()
outfile = here("figure_tp2" , "histogramme_taille_arbre.jpg")
jpeg(outfile)
library(here)
dir.create(here(figure_tp2) , recursive = TRUE)
dir.create(here("figure_tp2") , recursive = TRUE)
library(here)
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
names(data_sequoia)
hist(data_sequoia$taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
mean_taille_sequoia = mean(data_sequoia$taille_arbre)
ecart_type_sequoia = sd(data_sequoia$taille_arbre)
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
histogramme_taille_arbre = function() { hist(data_sequoia$taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
histogramme_taille_arbre()
outfile = here("figure_tp2" , "histogramme_taille_arbre.jpg")
jpeg(outfile)
histogramme_taille_arbre()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
if ( file.exists(outfile)) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
outfile_seq = here("figure_tp2" , "histogramme_taille_arbre.jpg")
jpeg(outfile_seq)
histogramme_taille_arbre()
dev.off()
if ( file.exists(outfile_seq)) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
dir.create(here("figure_tp2") , recursive = TRUE)
dir.create(here("figure_tp2") , recursive = TRUE)
dir.create(here("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2") , recursive = TRUE)
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
names(data_sequoia)
hist(data_sequoia$taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
mean_taille_sequoia = mean(data_sequoia$taille_arbre)
ecart_type_sequoia = sd(data_sequoia$taille_arbre)
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
histogramme_taille_arbre = function() { hist(data_sequoia$taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
histogramme_taille_arbre()
outfile_seq = here("figure_tp2" , "histogramme_taille_arbre.jpg")
jpeg(outfile_seq)
histogramme_taille_arbre()
dev.off()
if ( file.exists(outfile_seq)) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
here::here()
here::here()
setwd("~/Documents/M1_BBS/S7/tdb/tp_tdb")
freq_exp(1/4,1/2,1/4)
freq_exp = c(1/4,1/2,1/4)
freq_obs = c(22,53,25)
chisq.test(freq_obs, p=freq_exp)
q()
---
title: "Compte rendu TP3 - Tests Statistiques"
# Chunk 1: Test_de_Chi2_de_conformité
freq_exp = c(1/4,1/2,1/4) # fréquences relatives théoriques F2 $
freq_obs = c(22,53,25) # fréquences observées ecrits sous forme réelle.
chisq.test(freq_obs, p=freq_exp) ## Valeur de la stat de Chi2 , degre de liberté eet la p-value.
q()
mat = matrix( c( 15,5,3,0,19,16), nrow=2 , byrow = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
mat = matrix( c( 15,5,3,0,19,16), nrow=5 , byrow = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat = matrix( c( 15,5,3,0,19,16), nrow=2 , byrow = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16), nrow=2 ,ncol=4, byrow = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16), nrow=2 ,ncol=2, byrow = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16), nrow=2 ,ncol=3, byrow = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16), nrow=2 ,ncol=3, bycol = T , dimnames = list(c("R","S"), c("Col","Ws","Can")))
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16), nrow=2 ,ncol=3, byrow = F , dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16), nrow=2 ,ncol=3, byrow = T, dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
chisq.test(mat, correct = F)
chisq.test(mat, correct = F) #
chisq.test(mat, correct = T) #
15*23/58
effectif_théorique_COL_R = 15*23/58
round(effectif_théorique_COL_R,2)
round(effectif_théorique_COL_R,1)
round(effectif_théorique_COL_R)
mat
obs=chisq.test(mat, correct =F)$observed
exp=chisq.test(mat, correct =F)$expected
obs-exp
obs-exp
chisq.test(mat, correct =F)$expected
chisq.test(mat, correct =F)$observed
# Vecteurs des tailles des plantes
Col_0=c(4.30,4.25,3.50,3.35,4.30,3.75,3.55,4.10,3.95,4.55,4.25,3.75,3.85,4.15,3.55,4.75,3.95,3.65)
Mut_X1=c(3.06,4.05,3.95,3.40,3.80,3.95,3.65,4,3.85,3.95,3.65,3.75,3.4)
# Valeurs moyennes
mean(Col_0)
mean(Mut_X1)
# Représentation graphique des données
boxplot(Col_0,Mut_X1,names=c("Col_0","Mut_X1"),col=c("white","darkgreen"),ylab="taille (cm)")
abline(h=mean(Col_0),col="black",lty=3,lwd=2)
abline(h=mean(Mut_X1),col="green",lty=3,lwd=2)
legend("topright", legend = c("Mut_X1","Col_0" ), text.col = c("darkgreen","black"))
# Vecteurs des tailles des plantes
Col_0=c(4.30,4.25,3.50,3.35,4.30,3.75,3.55,4.10,3.95,4.55,4.25,3.75,3.85,4.15,3.55,4.75,3.95,3.65)
Mut_X1=c(3.06,4.05,3.95,3.40,3.80,3.95,3.65,4,3.85,3.95,3.65,3.75,3.4)
# Valeurs moyennes
mean(Col_0)
mean(Mut_X1)
# Représentation graphique des données
boxplot(Col_0,Mut_X1,names=c("Col_0","Mut_X1"),col=c("white","darkgreen"),ylab="taille (cm)")
abline(h=mean(Col_0),col="black",lty=3,lwd=2)
abline(h=mean(Mut_X1),col="green",lty=3,lwd=2)
legend("topright", legend = c("Mut_X1","Col_0" ), text.col = c("darkgreen","black"))
# Valeurs moyennes
mean(Col_0)
mean(Mut_X1)
# Valeurs moyennes
taille_moyenne_wild = mean(Col_0)
taille_moyenne_mutant = mean(Mut_X1)
```{r, echo=F}
hist(Col_0 , col="darkgreen")
hist(Mut_X1 , add=T)
hist(Col_0 , col="darkgreen", xlim=c(0,5))
hist(Mut_X1 , add=T)
hist(Col_0 , col="darkgreen", xlim=c(0,5), ylim=(0,5))
hist(Col_0 , col="darkgreen", xlim=c(0,5), ylim=(0,5))
hist(Col_0 , col="darkgreen", xlim=c(0,5), ylim=c(0,5))
hist(Mut_X1 , add=T)
hist(Mut_X1 , rgb(1,0),add=T)
hist(Col_0 , col="darkgreen", xlim=c(0,5), ylim=c(0,5))
hist(Mut_X1 , rgb(1,0),add=T)
hist(Mut_X1 , rgb(1,1),add=T)
hist(Mut_X1 , rgb(),add=T)
?rgr
?rgb
hist(Mut_X1 , rgb(1, 0, 0, 0.5) ,add=T)
hist(Col_0 , col="darkgreen", xlim=c(0,5), ylim=c(0,5))
hist(Mut_X1 , rgb(1, 0, 0, 0.5) ,add=T)
hist(Mut_X1 , col = rgb(1, 0, 0, 0.5) ,add=T)
shapiro.test(Col_0)
shapiro.test(Mut_X1)
var.test(Col_0, Mut_X1)
knit_with_parameters("~/Documents/M1_BBS/S7/tdb/tp_tdb/TDB.TP3_tests_R.Rmd")
var.test(Col_0, Mut_X1)
t.test(Col_0,Mut_X1,var.equal = T)
t.test(Col_0,Mut_X1,var.equal = T, alternative = "greater")
t.test(Col_0,Mut_X1,var.equal = T, alternative = "less")
t.test(Col_0,Mut_X1,var.equal = T)
t.test(Col_0,Mut_X1,var.equal = T, alternative = "greater")
non_infected=c(0.021,0.15,0.023,0.03,0.022,0.05,0.035,0.1,0.03)
infected=c(1.22,1.12,1.06,1.04,0.86,1.24,1.96,0.9,2.5)
mean(non_infected)
mean(infected)
non_infected=c(0.021,0.15,0.023,0.03,0.022,0.05,0.035,0.1,0.03)
infected=c(1.22,1.12,1.06,1.04,0.86,1.24,1.96,0.9,2.5)
mean(non_infected)
mean(infected)
wilcox.test(infected,non_infected)                        # bilatéral
wilcox.test(infected,non_infected,alternative="greater")  # unilatéral
wilcox.test(infected,non_infected)                        # bilatéral
mean(non_infected)
mean(infected)
shapiro.test(infected)
shapiro.test(non_infected)
wilcox.test(infected,non_infected)                        # bilatéral
wilcox.test(infected,non_infected,alternative="greater")  # unilatéral
non_infected=c(0.021,0.15,0.023,0.03,0.022,0.05,0.035,0.1)
infected=c(1.22,1.12,1.06,1.04,0.86,1.24,1.96,0.9,2.5)
wilcox.test(infected,non_infected)                        # bilatéral
wilcox.test(infected,non_infected,alternative="greater")  # unilatéral
,0.03
,0.03
non_infected=c(0.021,0.15,0.023,0.03,0.022,0.05,0.035,0.1,0.03)
infected=c(1.22,1.12,1.06,1.04,0.86,1.24,1.96,0.9,2.5)
mean(non_infected)
mean(infected)
non_infected=c(0.021,0.15,0.023,0.03,0.022,0.05,0.035,0.1,0.03)
infected=c(1.22,1.12,1.06,1.04,0.86,1.24,1.96,0.9,2.5)
mean(non_infected)
mean(infected)
## Test d'adéquation à la loi normale
**Test de Shapiro**
On rejette l'hypothese nulle. Les distributions ne suivent pas une loi normale.
Le wilcow test montre que le gene est surexprimé quand il y a une infection.
Le wilcow test montre que le gene est surexprimé quand il y a une infection.
wilcox.test(infected,non_infected)                        # bilatéral
wilcox.test(infected,non_infected,alternative="greater")  # unilatéral
?jitter
#Tableau de contingence
mat = matrix( c( 15,5,3,0,19,16),
nrow=2 ,
ncol=3,
byrow = T,
dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
chisq.test(mat, correct = F) # Correct: correction des effectifs lorsqu'ils sont trop faibles ( pas important )
chisq.test(mat, correct = F) # Correct: correction des effectifs lorsqu'ils sont trop faibles ( pas important )
obs=chisq.test(mat, correct =F)$observed
exp=chisq.test(mat, correct =F)$expected
obs-exp
shapiro.test(Col_0)
shapiro.test(Mut_X1)
t.test(Col_0,Mut_X1,var.equal = T)
t.test(Col_0,Mut_X1,var.equal = T, alternative = "greater")
t.test(Col_0,Mut_X1,var.equal = T, alternative = "less")
wilcox.test(infected,non_infected)                        # bilatéral
wilcox.test(infected,non_infected,alternative="greater")  # unilatéral
# Vérification attendus vs observés
cbind(observe = freq_obs, attendu = round(ch_conformite$expected, 2))
freq_exp <- c(1/4, 1/2, 1/4)                   # doivent sommer à 1
freq_obs <- c(22, 53, 25)                      # effectifs observés (total = 100)
(ch_conformite <- chisq.test(freq_obs, p = freq_exp))
# Vérification attendus vs observés
cbind(observe = freq_obs, attendu = round(ch_conformite$expected, 2))
# Tableau de contingence (lignes = phénotype ; colonnes = écotype)
mat <- matrix(c(15, 5, 3,   # R: Col, Ws, Can
0, 19, 16), # S: Col, Ws, Can
nrow = 2, byrow = TRUE,
dimnames = list(c("R","S"), c("Col","Ws","Can")))
mat
(ch_indep <- chisq.test(mat, correct = FALSE))  # sans correction de continuité
(ch_indep <- chisq.test(mat, correct = FALSE))  # sans correction de continuité
# Normalité (Shapiro-Wilk)
(sw_col <- shapiro.test(Col_0))
(sw_mut <- shapiro.test(Mut_X1))
# Homogénéité des variances (F de Fisher-Snedecor)
(f_test <- var.test(Col_0, Mut_X1))
# Homogénéité des variances (F de Fisher-Snedecor)
f_test <- var.test(Col_0, Mut_X1
# Homogénéité des variances (F de Fisher-Snedecor)
f_test <- var.test(Col_0, Mut_X1)
# Homogénéité des variances (F de Fisher-Snedecor)
f_test <- var.test(Col_0, Mut_X1)
f_test
# Bilatéral (par défaut)
t_bilat <- t.test(Col_0, Mut_X1, var.equal = TRUE)
t_bilat
# Unilatéral (ex. H1: Col_0 > Mut_X1)
t_uni <- t.test(Col_0, Mut_X1, var.equal = TRUE, alternative = "greater")
t_uni
freq_exp <- c(1/4, 1/2, 1/4)                   # doivent sommer à 1
freq_obs <- c(22, 53, 25)                      # effectifs observés (total = 100)
(ch_conformite <- chisq.test(freq_obs, p = freq_exp))
# Vérification attendus vs observés
cbind(observe = freq_obs, attendu = round(ch_conformite$expected, 2))
effectif_théorique_COL_R = 15*23/58
round(effectif_théorique_COL_R)
obs=chisq.test(mat, correct =F)$observed
exp=chisq.test(mat, correct =F)$expected
obs-exp
