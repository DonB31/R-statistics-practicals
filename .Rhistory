right_apples = frequence_red_apples + error_red_apple
round(left_apples,2);round(right_apples,2)
# Chunk 22
cat("L'intervalle ayant 95% de chance d'obtenir la vrai proportion p de la popualtion est entre" , left_apples, "et",  right_apples)
detach(data_tomatos)
cat("L'intervalle de confiance a 95% sera compris entre", left , "et" , right, ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 5%. ")
# Chunk 1
genomes = read.table(params$fichier_bacteries , params$separateur_bacterias , header = TRUE)
attach(genomes)
names(genomes)
Genome_size
ORF_number
which(ORF_number<4000)
plot(Genome_size , ORF_number , pch=16)
# Chunk 2
cov(Genome_size , ORF_number)
round(cor(Genome_size , ORF_number),2)
# Chunk 3
ligneregression = lm(ORF_number ~ Genome_size)
summary(ligneregression)
# Chunk 4
cor(Genome_size , ORF_number)^2
# Chunk 5
plot(Genome_size , ORF_number , pch=16)
abline(ligneregression , col="red", lwd=2)
detach (genomes)
# Chunk 6
data_sequoia = read.table(params$fichier_sequoia , params$separateur_sequoia , header = TRUE)
attach(data_sequoia)
names(data_sequoia)
hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , col='salmon' )
histogramme_taille_arbre = function() { hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
mean_taille_sequoia = mean(taille_arbre)
ecart_type_sequoia = sd(taille_arbre)
# Chunk 7
proba_arbre_80m = length(which(taille_arbre==80))/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 80m est de", proba_arbre_80m)
# Chunk 8
proba_arbre_100m = length(taille_arbre[taille_arbre>100])/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 100m est de", proba_arbre_100m)
# Chunk 9
dnorm(0,0,1) # On a ici x=0, mean=0 et sd=1 respectivement. Ici , x est une variable aleatoire, mean correspond à la mean de la population et sd c'est l'ecart type de la popualtion.
hist(rnorm(100,0,1), col='red')
# Chunk 10
hist(rnorm(10000,0,1))
# Chunk 11
calcul_arbre80m = round(dnorm(80,mean_taille_sequoia , ecart_type_sequoia ) , 3)
calcul_arbre80m
calcul_arbre100m = round(pnorm(100,mean_taille_sequoia, ecart_type_sequoia, lower.tail = F),3)
calcul_arbre100m
# Chunk 12
cat("La probabilité qu'un arbre fasse 80m selon la loi normal est de",calcul_arbre80m)
cat("Le calcul des probabilités qu'un arbre mesure 100m ou plus est de", calcul_arbre100m,". Cette valeur est legerement differente que le calcul direct par nombre d'arbres de 100m divisé par le total.", proba_arbre_100m, "vs", calcul_arbre100m)
# Chunk 13
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
# Chunk 14
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
# Chunk 15
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
## Afficher figure
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="salmon", main="Loi Binomiale B(100,0.8)") }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
detach(data_sequoia)
# Chunk 16
data_tomatos = read.table("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/tomatos_cherry.txt" , params$separateur_tomatos , header=T)
attach(data_tomatos)
names(data_tomatos)
mean_tomatos = mean(poids_tomate)
sd_tomatos = sd(poids_tomate)
n_tomatos = length(poids_tomate)
# Chunk 17
error = qt(0.975, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left = round((mean_tomatos - error),2)
right = round((mean_tomatos + error),2)
left;right
# Chunk 18
cat("L'intervalle de confiance a 95% sera compris entre", left , "et" , right, ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 5%. ")
# Chunk 19
error_99 = qt(0.995, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left_99_tomatos = round((mean_tomatos - error_99),2)
right_99_tomatos = round((mean_tomatos + error_99),2)
left_99_tomatos;right_99_tomatos
# Chunk 20
cat("L'intervalle de confiance a 95% sera compris entre", left_99_tomatos , "et" , right_99_tomatos , ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 1%.")
# Chunk 21
frequence_red_apples = 0.4 # fréquence de pommes rouges dans l'échantillon
n = 125 # taille de l'échantillon
error_red_apple = qnorm(0.975)*sqrt(frequence_red_apples*(1-frequence_red_apples)/n)
left_apples = round((frequence_red_apples - error_red_apple),2)
right_apples = round((frequence_red_apples + error_red_apple,2)
# Chunk 1
genomes = read.table(params$fichier_bacteries , params$separateur_bacterias , header = TRUE)
attach(genomes)
names(genomes)
Genome_size
ORF_number
which(ORF_number<4000)
plot(Genome_size , ORF_number , pch=16)
# Chunk 2
cov(Genome_size , ORF_number)
round(cor(Genome_size , ORF_number),2)
# Chunk 3
ligneregression = lm(ORF_number ~ Genome_size)
summary(ligneregression)
# Chunk 4
cor(Genome_size , ORF_number)^2
# Chunk 5
plot(Genome_size , ORF_number , pch=16)
abline(ligneregression , col="red", lwd=2)
detach (genomes)
# Chunk 6
data_sequoia = read.table(params$fichier_sequoia , params$separateur_sequoia , header = TRUE)
attach(data_sequoia)
names(data_sequoia)
hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , col='salmon' )
histogramme_taille_arbre = function() { hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
mean_taille_sequoia = mean(taille_arbre)
ecart_type_sequoia = sd(taille_arbre)
# Chunk 7
proba_arbre_80m = length(which(taille_arbre==80))/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 80m est de", proba_arbre_80m)
# Chunk 8
proba_arbre_100m = length(taille_arbre[taille_arbre>100])/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 100m est de", proba_arbre_100m)
# Chunk 9
dnorm(0,0,1) # On a ici x=0, mean=0 et sd=1 respectivement. Ici , x est une variable aleatoire, mean correspond à la mean de la population et sd c'est l'ecart type de la popualtion.
hist(rnorm(100,0,1), col='red')
# Chunk 10
hist(rnorm(10000,0,1))
# Chunk 11
calcul_arbre80m = round(dnorm(80,mean_taille_sequoia , ecart_type_sequoia ) , 3)
calcul_arbre80m
calcul_arbre100m = round(pnorm(100,mean_taille_sequoia, ecart_type_sequoia, lower.tail = F),3)
calcul_arbre100m
# Chunk 12
cat("La probabilité qu'un arbre fasse 80m selon la loi normal est de",calcul_arbre80m)
cat("Le calcul des probabilités qu'un arbre mesure 100m ou plus est de", calcul_arbre100m,". Cette valeur est legerement differente que le calcul direct par nombre d'arbres de 100m divisé par le total.", proba_arbre_100m, "vs", calcul_arbre100m)
# Chunk 13
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
# Chunk 14
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
# Chunk 15
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
## Afficher figure
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="salmon", main="Loi Binomiale B(100,0.8)") }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
detach(data_sequoia)
# Chunk 16
data_tomatos = read.table("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/tomatos_cherry.txt" , params$separateur_tomatos , header=T)
attach(data_tomatos)
names(data_tomatos)
mean_tomatos = mean(poids_tomate)
sd_tomatos = sd(poids_tomate)
n_tomatos = length(poids_tomate)
# Chunk 17
error = qt(0.975, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left = round((mean_tomatos - error),2)
right = round((mean_tomatos + error),2)
left;right
# Chunk 18
cat("L'intervalle de confiance a 95% sera compris entre", left , "et" , right, ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 5%. ")
# Chunk 19
error_99 = qt(0.995, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left_99_tomatos = round((mean_tomatos - error_99),2)
right_99_tomatos = round((mean_tomatos + error_99),2)
left_99_tomatos;right_99_tomatos
# Chunk 20
cat("L'intervalle de confiance a 95% sera compris entre", left_99_tomatos , "et" , right_99_tomatos , ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 1%.")
# Chunk 21
frequence_red_apples = 0.4 # fréquence de pommes rouges dans l'échantillon
n = 125 # taille de l'échantillon
error_red_apple = qnorm(0.975)*sqrt(frequence_red_apples*(1-frequence_red_apples)/n)
left_apples = round((frequence_red_apples - error_red_apple),2)
right_apples = round((frequence_red_apples + error_red_apple),2)
left_apples;right_apples
# Chunk 22
cat("L'intervalle ayant 95% de chance d'obtenir la vrai proportion p de la popualtion est entre" , left_apples, "et",  right_apples)
detach(data_tomatos)
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" width=1600, height=1200, res=200)
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
attach(genomes)
names(genomes)
Genome_size
ORF_number
which(ORF_number<4000)
plot(Genome_size , ORF_number , pch=16)
# Chunk 2
cov(Genome_size , ORF_number)
round(cor(Genome_size , ORF_number),2)
# Chunk 3
ligneregression = lm(ORF_number ~ Genome_size)
summary(ligneregression)
# Chunk 4
cor(Genome_size , ORF_number)^2
# Chunk 5
plot(Genome_size , ORF_number , pch=16)
abline(ligneregression , col="red", lwd=2)
detach (genomes)
# Chunk 6
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
attach(data_sequoia)
names(data_sequoia)
hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , col='salmon' )
histogramme_taille_arbre = function() { hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
mean_taille_sequoia = mean(taille_arbre)
ecart_type_sequoia = sd(taille_arbre)
# Chunk 7
proba_arbre_80m = length(which(taille_arbre==80))/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 80m est de", proba_arbre_80m)
# Chunk 8
proba_arbre_100m = length(taille_arbre[taille_arbre>100])/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 100m est de", proba_arbre_100m)
# Chunk 9
dnorm(0,0,1) # On a ici x=0, mean=0 et sd=1 respectivement. Ici , x est une variable aleatoire, mean correspond à la mean de la population et sd c'est l'ecart type de la popualtion.
hist(rnorm(100,0,1), col='red')
# Chunk 10
hist(rnorm(10000,0,1))
# Chunk 11
calcul_arbre80m = round(dnorm(80,mean_taille_sequoia , ecart_type_sequoia ) , 3)
calcul_arbre80m
calcul_arbre100m = round(pnorm(100,mean_taille_sequoia, ecart_type_sequoia, lower.tail = F),3)
calcul_arbre100m
# Chunk 12
cat("La probabilité qu'un arbre fasse 80m selon la loi normal est de",calcul_arbre80m)
cat("Le calcul des probabilités qu'un arbre mesure 100m ou plus est de", calcul_arbre100m,". Cette valeur est legerement differente que le calcul direct par nombre d'arbres de 100m divisé par le total.", proba_arbre_100m, "vs", calcul_arbre100m)
# Chunk 13
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
# Chunk 14
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
# Chunk 15
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
## Afficher figure
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="salmon", main="Loi Binomiale B(100,0.8)") }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
detach(data_sequoia)
# Chunk 16
data_tomatos = read.table(params$fichier_tomatos , sep = params$separateur_tomatos , header=T)
attach(data_tomatos)
names(data_tomatos)
mean_tomatos = mean(poids_tomate)
sd_tomatos = sd(poids_tomate)
n_tomatos = length(poids_tomate)
# Chunk 17
error = qt(0.975, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left = mean_tomatos - error
right = mean_tomatos + error
left;right
# Chunk 18
cat("L'intervalle de confiance a 95% sera compris entre", left , "et" , right, ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 5%. ")
# Chunk 19
error_99 = qt(0.995, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left_99_tomatos = mean_tomatos - error_99
right_99_tomatos = mean_tomatos + error_99
left_99_tomatos;right_99_tomatos
# Chunk 20
cat("L'intervalle de confiance a 95% sera compris entre", left_99_tomatos , "et" , right_99_tomatos , ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 1%.")
# Chunk 21
frequence_red_apples = 0.4 # fréquence de pommes rouges dans l'échantillon
n = 125 # taille de l'échantillon
error_red_apple = qnorm(0.975)*sqrt(frequence_red_apples*(1-frequence_red_apples)/n)
left_apples = frequence_red_apples - error_red_apple
right_apples = frequence_red_apples + error_red_apple
left_apples;right_apples
# Chunk 22
cat("L'intervalle ayant 95% de chance d'obtenir la vrai proportion p de la popualtion est entre" , left_apples, "et",  right_apples)
detach(data_tomatos)
# Chunk 1
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
attach(genomes)
names(genomes)
Genome_size
ORF_number
which(ORF_number<4000)
plot(Genome_size , ORF_number , pch=16)
# Chunk 2
cov(Genome_size , ORF_number)
round(cor(Genome_size , ORF_number),2)
# Chunk 3
ligneregression = lm(ORF_number ~ Genome_size)
summary(ligneregression)
# Chunk 4
cor(Genome_size , ORF_number)^2
# Chunk 5
plot(Genome_size , ORF_number , pch=16)
abline(ligneregression , col="red", lwd=2)
detach (genomes)
# Chunk 6
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
attach(data_sequoia)
names(data_sequoia)
hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , col='salmon' )
histogramme_taille_arbre = function() { hist(taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")
histogramme_taille_arbre()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/histogramme_taille_arbres.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
mean_taille_sequoia = mean(taille_arbre)
ecart_type_sequoia = sd(taille_arbre)
# Chunk 7
proba_arbre_80m = length(which(taille_arbre==80))/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 80m est de", proba_arbre_80m)
# Chunk 8
proba_arbre_100m = length(taille_arbre[taille_arbre>100])/length(taille_arbre)
cat("La probabilité qu'un arbre mesure 100m est de", proba_arbre_100m)
# Chunk 9
dnorm(0,0,1) # On a ici x=0, mean=0 et sd=1 respectivement. Ici , x est une variable aleatoire, mean correspond à la mean de la population et sd c'est l'ecart type de la popualtion.
hist(rnorm(100,0,1), col='red')
# Chunk 10
hist(rnorm(10000,0,1))
# Chunk 11
calcul_arbre80m = round(dnorm(80,mean_taille_sequoia , ecart_type_sequoia ) , 3)
calcul_arbre80m
calcul_arbre100m = round(pnorm(100,mean_taille_sequoia, ecart_type_sequoia, lower.tail = F),3)
calcul_arbre100m
# Chunk 12
cat("La probabilité qu'un arbre fasse 80m selon la loi normal est de",calcul_arbre80m)
cat("Le calcul des probabilités qu'un arbre mesure 100m ou plus est de", calcul_arbre100m,". Cette valeur est legerement differente que le calcul direct par nombre d'arbres de 100m divisé par le total.", proba_arbre_100m, "vs", calcul_arbre100m)
# Chunk 13
n=100
p=0.8
proba_80_graines_germent = dbinom(80,n,prob=p)
proba_au_max80_graines_germent = pbinom(80,n,prob=p)
proba_plus_de_80_graines_germent = pbinom(80,n,prob=p , lower.tail=F)
cat("La probabilité que 80 graines germent est de" ,proba_80_graines_germent)
# Chunk 14
cat("La probabilité que au maximum 80 graines germent est de",proba_au_max80_graines_germent)
cat("La probabilité que plus de 80 graines germent est de",proba_plus_de_80_graines_germent)
# Chunk 15
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
## Afficher figure
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="salmon", main="Loi Binomiale B(100,0.8)") }
jpeg("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg" , width=1600, height=1200, res=200)
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
detach(data_sequoia)
# Chunk 16
data_tomatos = read.table(params$fichier_tomatos , sep = params$separateur_tomatos , header=T)
attach(data_tomatos)
names(data_tomatos)
mean_tomatos = mean(poids_tomate)
sd_tomatos = sd(poids_tomate)
n_tomatos = length(poids_tomate)
# Chunk 17
error = qt(0.975, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left = mean_tomatos - error
right = mean_tomatos + error
left;right
# Chunk 18
cat("L'intervalle de confiance a 95% sera compris entre", left , "et" , right, ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 5%. ")
# Chunk 19
error_99 = qt(0.995, df=n-1)*sd_tomatos/sqrt(n_tomatos)
left_99_tomatos = mean_tomatos - error_99
right_99_tomatos = mean_tomatos + error_99
left_99_tomatos;right_99_tomatos
# Chunk 20
cat("L'intervalle de confiance a 95% sera compris entre", left_99_tomatos , "et" , right_99_tomatos , ". On peut estimer que la mean de la taille des tomatos de la population se trouve dans cette intervalle ave cun risque d'erreur de 1%.")
# Chunk 21
frequence_red_apples = 0.4 # fréquence de pommes rouges dans l'échantillon
n = 125 # taille de l'échantillon
error_red_apple = qnorm(0.975)*sqrt(frequence_red_apples*(1-frequence_red_apples)/n)
left_apples = frequence_red_apples - error_red_apple
right_apples = frequence_red_apples + error_red_apple
left_apples;right_apples
# Chunk 22
cat("L'intervalle ayant 95% de chance d'obtenir la vrai proportion p de la popualtion est entre" , left_apples, "et",  right_apples)
detach(data_tomatos)
here::(here)
here
here:here()
here::here()
# Chunk 1
library(here)
dir.create(here("figure_tp2") , recursive = TRUE)
# Chunk 2
genomes = read.table(params$fichier_bacteries , sep = params$separateur_bacterias , header = TRUE)
names(genomes)
with(genomes , plot(Genome_size , ORF_number , pch=16 , ylab="Nombre d'ORF" , xlab = "Taille du génome (pb)" , main="Relation de la taille des genomes avec le nombre d'ORF. " ))
# Chunk 3
cov_xy = with(genomes, cov(Genome_size , ORF_number))
r_xy = with(genomes, cor(Genome_size , ORF_number))
cat(sprintf("Covariance = %.0f ; r (Pearson) = %.2f\n", cov_xy, r_xy))
# Chunk 4
ligneregression = lm(ORF_number~Genome_size, data = genomes) # Nous n'avons utilisé pas attach donc faut lui preciser sur quoi on travaille.
# Chunk 5
abline(ligneregression , col="red", lwd=2)
summary(ligneregression)
# Chunk 6
data_sequoia = read.table(params$fichier_sequoia , sep = params$separateur_sequoia , header = TRUE)
names(data_sequoia)
hist(data_sequoia$taille_arbre,
main="Histogramme representant la taille des arbres Sequoia",
ylab='Frequence',
col='salmon' )
mean_taille_sequoia = mean(data_sequoia$taille_arbre)
ecart_type_sequoia = sd(data_sequoia$taille_arbre)
cat("La taille moyenne est de" , mean_taille_sequoia , " et l'écart-type est" , ecart_type_sequoia
)
histogramme_taille_arbre = function() { hist(data_sequoia$taille_arbre , main="Histogramme representant la taille des arbres Sequoia" , ylab='Frequence' , xlab='Taille des arbres' ) }
histogramme_taille_arbre()
outfile_seq = here("figure_tp2" , "histogramme_taille_arbre.jpg")
jpeg(outfile_seq)
histogramme_taille_arbre()
dev.off()
if ( file.exists(outfile_seq)) {
cat("Le fichier a bien ete genérée.
")
} # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
# Chunk 7
proba_arbre_80m = length(which(taille_arbre==80))/length(taille_arbre)
mean_graines_germes = n*p
cat("D'apres notre n et p, on devrait s'attendre en mean a" , mean_graines_germes)
k = seq(0,100,1)
figure_loi_binomiale = function() { plot(dbinom(k,100,prob=0.8), xlab="k" , ylab="Prob(X=k)" , col="red", main="Loi Binomiale B(100,0.8)") }
figure_loi_binomiale()
outfile = ("figure_tp2" , "figure_loi_binomiale")
jpeg(outfile , width=1600, height=1200, res=200)
jpeg(outfile)
figure_loi_binomiale()
outfile = ("figure_tp2" , "figure_loi_binomiale")
figure_loi_binomiale()
outfile = here("figure_tp2" , "figure_loi_binomiale")
jpeg(outfile)
figure_loi_binomiale()
dev.off()
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ") } # Utilisation de if pour envoyer un output qui confirme l'existence de notre fichier.
if ( file.exists("/Users/bachri/Documents/M1_BBS/S7/tdb/tp_tdb/figure_tp2/figure_loi_binomiale.jpg")) {
cat("Le fichier a bien ete genérée. ") }
if ( file.exists(outfile)) {
cat("Le fichier a bien ete genérée. ") }
?outfile
??outfile
?here
