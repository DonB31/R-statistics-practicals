shapiro.test(resistance$score[resistance$lignee=="HM013"])
# Ou on fait tapply
tapply(resistance$score, resistance$lignee , shapiro.test )
# Chunk 4
bartlett.test(resistance$score~resistance$lignee)
# Chunk 5: Test_Anova
res = aov(resistance$score~resistance$lignee) # Test ANOVA
summary(res) # Afficher tableau ANOVA.
# Df = degre de liberte
# sum square = somme ecart a la moyenne.
# Aire sous la courbe, p value = 1.18e-5.
# Chunk 6: visualiser_moyennees_chaque_groupe
model.tables(res)
tapply(resistance$score , resistance$lignee , mean) - mean(resistance$score) # Differences de la moyenne par rapport a moyenne generale.
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="A17"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="HM008"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
pairwise.t.test(resistance$score , resistance$lignee , pool.sd=F, p.adjust.method = "bonferroni" , var.equal=T)
# il va faire les tests 2 a 2
# bonferroni va multipliler les p values et diviser le seuil par le nombre de tests.
# Chunk 7
duncan.test(res, "lignee", alpha=0.01, console=T)
# Chunk 8
croissance <- read.table("croissance.txt", header=T, stringsAsFactors=T) ; head(croissance)
attach(croissance);names(croissance)
layout( matrix( c(1,2,3,3) , nrow=2, ncol=2, byrow = FALSE))
boxplot(hauteur~engrais, main="engrais", ylab="hauteur (cm)")
boxplot(hauteur~temperature, main="temperature", ylab="hauteur (cm)")
boxplot(hauteur~temperature+engrais, main="engrais-temperature", ylab="hauteur (cm)", las=3)
# Chunk 9
# remarque: pour sélectionner les lignes correspondant à une combinaison de facteur colonnes, on utilise "&":
shapiro.test(hauteur[engrais=="A" & temperature=="Medium"])
shapiro.test(hauteur[engrais=="A" & temperature=="High"])
shapiro.test(hauteur[engrais=="B" & temperature=="Medium"])
shapiro.test(hauteur[engrais=="B" & temperature=="High"])
# Chunk 10
bartlett.test(hauteur~interaction(temperature,engrais))
# Chunk 11
model1 <- aov(hauteur~temperature*engrais)
summary(model1)
interaction.plot(temperature, engrais, hauteur, main="interaction plot")
# Chunk 12
model2 <- aov(hauteur~temperature+engrais)
summary(model2)
# Chunk 13
anova(model1, model2)
# Chunk 14
# plantes avec "engrais" différents
t.test(hauteur[engrais=="A" & temperature=="High"], hauteur[engrais=="B" & temperature=="High"], var.equal=T)     # comparaison A/B pour température "High"
t.test(hauteur[engrais=="A" & temperature=="Medium"], hauteur[engrais=="B" & temperature=="Medium"], var.equal=T) # comparaison A/B pour température "Medium"
# plantes avec "températures" différentes
t.test(hauteur[engrais=="A" & temperature=="Medium"], hauteur[engrais=="A" & temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais A
t.test(hauteur[engrais=="B" & temperature=="Medium"], hauteur[engrais=="B" & temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais B
# Chunk 15
# Lecture du fichier
vache <- read.table("vache.txt", header=TRUE, stringsAsFactors=TRUE)
head(vache)
# Chunk 16
# Vérifions les effectifs par race
table(vache$race)
# Chunk 17
# Moyenne de la production par race
tapply(vache$prod_lait, vache$race, mean)
# Chunk 18
tapply(vache$prod_lait, vache$race, summary)
# Chunk 19
# Visualisation
boxplot(vache$prod_lait ~ vache$race, col=c("lightblue","lightgreen","orange"), ylab="Production de lait (L/jour)" ,  main = "Production journalière de lait selon la race")
bp <- boxplot(prod_lait ~ race, data = vache,
col = c("lightblue","lightgreen","orange"),
ylab = "Production de lait (L/jour)",
main = "Production journalière de lait selon la race")
# Chunk 20
# La fonction by sert a appliquer une fonction , ici shapiro.test sur un data frame et appliquer ce test sur les differents facteurs.
by(vache$prod_lait, vache$race, shapiro.test)
# Chunk 21
# On peut aussi utiliser data=vache pour eviter attach. ( ou remplacer vache$prod_lait)
bartlett.test(prod_lait ~ race, data=vache)
# Chunk 22
res <- aov(prod_lait ~ race, data=vache)
summary(res)
# Chunk 23
pairwise.t.test(vache$prod_lait, vache$race, p.adjust.method="bonferroni")
# Chunk 24
# install.packages("agricolae") # si non déjà installé
library(agricolae)
duncan.test(res, "race", alpha=0.05, console=TRUE)
# Chunk 1: setup
library(agricolae)
# Chunk 2: Exploration_jeu_de_donnes
resistance <- read.table("resistance.txt", header=T, stringsAsFactors=T); head(resistance) ; tail(resistance)
names(resistance)
table(resistance$lignee)
tapply(resistance$score, resistance$lignee , mean )
# va appliquer la fonction mean sur le score et les regrouper par lignees.
tapply(resistance$score, resistance$lignee, summary)
# va appliquer la fonction summary sur le score et les regrouper par lignees.
hist(resistance$score, breaks=15, ylab="effectifs" )
boxplot(resistance$score~resistance$lignee, col="green", ylab="score")
# Chunk 3: Tests_prealable_ANOVA
shapiro.test(resistance$score[resistance$lignee=="HM008"])
shapiro.test(resistance$score[resistance$lignee=="A17"] )
shapiro.test(resistance$score[resistance$lignee=="DZA45"])
shapiro.test(resistance$score[resistance$lignee=="HM013"])
# Ou on fait tapply
tapply(resistance$score, resistance$lignee , shapiro.test )
# Chunk 4
bartlett.test(resistance$score~resistance$lignee)
# Chunk 5: Test_Anova
res = aov(resistance$score~resistance$lignee) # Test ANOVA
summary(res) # Afficher tableau ANOVA.
# Df = degre de liberte
# sum square = somme ecart a la moyenne.
# Aire sous la courbe, p value = 1.18e-5.
# Chunk 6: visualiser_moyennees_chaque_groupe
model.tables(res)
tapply(resistance$score , resistance$lignee , mean) - mean(resistance$score) # Differences de la moyenne par rapport a moyenne generale.
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="A17"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="HM008"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
pairwise.t.test(resistance$score , resistance$lignee , pool.sd=F, p.adjust.method = "bonferroni" , var.equal=T)
# il va faire les tests 2 a 2
# bonferroni va multipliler les p values et diviser le seuil par le nombre de tests.
# Chunk 7
duncan.test(res, "lignee", alpha=0.01, console=T)
# Chunk 8
croissance <- read.table("croissance.txt", header=T, stringsAsFactors=T) ; head(croissance)
layout( matrix( c(1,2,3,3) , nrow=2, ncol=2, byrow = FALSE))
boxplot(croissance$hauteur~croissance$engrais, main="engrais", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature, main="temperature", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature+croissance$engrais, main="engrais-temperature", ylab="hauteur (cm)", las=3)
# Chunk 9
# remarque: pour sélectionner les lignes correspondant à une combinaison de facteur colonnes, on utilise "&":
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"])
# Chunk 10
bartlett.test(croissance$hauteur~interaction(croissance$temperature,croissance$engrais))
# Chunk 11
model1 <- aov(croissance$hauteur~croissance$temperature*croissance$engrais)
summary(model1)
interaction.plot(croissance$temperature, croissance$engrais, croissance$hauteur, main="interaction plot")
# Chunk 12
model2 <- aov(croissance$hauteur~croissance$temperature+croissance$engrais)
summary(model2)
# Chunk 13
anova(model1, model2)
# Chunk 14
# plantes avec "engrais" différents
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)     # comparaison A/B pour température "High"
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], var.equal=T) # comparaison A/B pour température "Medium"
# plantes avec "températures" différentes
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais A
t.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais B
# Chunk 15
# Lecture du fichier
vache <- read.table("vache.txt", header=TRUE, stringsAsFactors=TRUE)
head(vache)
# Chunk 16
# Vérifions les effectifs par race
table(vache$race)
# Chunk 17
# Moyenne de la production par race
tapply(vache$prod_lait, vache$race, mean)
# Chunk 18
tapply(vache$prod_lait, vache$race, summary)
# Chunk 19
# Visualisation
boxplot(vache$prod_lait ~ vache$race, col=c("lightblue","lightgreen","orange"), ylab="Production de lait (L/jour)" ,  main = "Production journalière de lait selon la race")
bp <- boxplot(prod_lait ~ race, data = vache,
col = c("lightblue","lightgreen","orange"),
ylab = "Production de lait (L/jour)",
main = "Production journalière de lait selon la race")
# Chunk 20
# La fonction by sert a appliquer une fonction , ici shapiro.test sur un data frame et appliquer ce test sur les differents facteurs.
by(vache$prod_lait, vache$race, shapiro.test)
# Chunk 21
# On peut aussi utiliser data=vache pour eviter attach. ( ou remplacer vache$prod_lait)
bartlett.test(prod_lait ~ race, data=vache)
# Chunk 22
res <- aov(prod_lait ~ race, data=vache)
summary(res)
# Chunk 23
pairwise.t.test(vache$prod_lait, vache$race, p.adjust.method="bonferroni")
# Chunk 24
# install.packages("agricolae") # si non déjà installé
library(agricolae)
duncan.test(res, "race", alpha=0.05, console=TRUE)
# Chunk 1: setup
library(agricolae)
# Chunk 2: Exploration_jeu_de_donnes
resistance <- read.table("resistance.txt", header=T, stringsAsFactors=T); head(resistance) ; tail(resistance)
names(resistance)
table(resistance$lignee)
tapply(resistance$score, resistance$lignee , mean )
# va appliquer la fonction mean sur le score et les regrouper par lignees.
tapply(resistance$score, resistance$lignee, summary)
# va appliquer la fonction summary sur le score et les regrouper par lignees.
hist(resistance$score, breaks=15, ylab="effectifs" )
boxplot(resistance$score~resistance$lignee, col="green", ylab="score")
# Chunk 3: Tests_prealable_ANOVA
shapiro.test(resistance$score[resistance$lignee=="HM008"])
shapiro.test(resistance$score[resistance$lignee=="A17"] )
shapiro.test(resistance$score[resistance$lignee=="DZA45"])
shapiro.test(resistance$score[resistance$lignee=="HM013"])
# Ou on fait tapply
tapply(resistance$score, resistance$lignee , shapiro.test )
# Chunk 4
bartlett.test(resistance$score~resistance$lignee)
# Chunk 5: Test_Anova
res = aov(resistance$score~resistance$lignee) # Test ANOVA
summary(res) # Afficher tableau ANOVA.
# Df = degre de liberte
# sum square = somme ecart a la moyenne.
# Aire sous la courbe, p value = 1.18e-5.
# Chunk 6: visualiser_moyennees_chaque_groupe
model.tables(res)
tapply(resistance$score , resistance$lignee , mean) - mean(resistance$score) # Differences de la moyenne par rapport a moyenne generale.
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="A17"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="HM008"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
pairwise.t.test(resistance$score , resistance$lignee , pool.sd=F, p.adjust.method = "bonferroni" , var.equal=T)
# il va faire les tests 2 a 2
# bonferroni va multipliler les p values et diviser le seuil par le nombre de tests.
# Chunk 7
duncan.test(res, "lignee", alpha=0.01, console=T)
# Chunk 8
croissance <- read.table("croissance.txt", header=T, stringsAsFactors=T) ; head(croissance)
layout( matrix( c(1,2,3,3) , nrow=2, ncol=2, byrow = FALSE))
boxplot(croissance$hauteur~croissance$engrais, main="engrais", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature, main="temperature", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature+croissance$engrais, main="engrais-temperature", ylab="hauteur (cm)", las=3)
# Chunk 9
# remarque: pour sélectionner les lignes correspondant à une combinaison de facteur colonnes, on utilise "&":
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"])
# Chunk 10
bartlett.test(croissance$hauteur~interaction(croissance$temperature,croissance$engrais))
# Chunk 11
model1 <- aov(croissance$hauteur~croissance$temperature*croissance$engrais)
summary(model1)
interaction.plot(croissance$temperature, croissance$engrais, croissance$hauteur, main="interaction plot")
# Chunk 12
model2 <- aov(croissance$hauteur~croissance$temperature+croissance$engrais)
summary(model2)
# Chunk 13
anova(model1, model2)
# Chunk 14
# plantes avec "engrais" différents
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)     # comparaison A/B pour température "High"
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], var.equal=T) # comparaison A/B pour température "Medium"
# plantes avec "températures" différentes
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais A
t.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais B
# Chunk 15
# Lecture du fichier
vache <- read.table("vache.txt", header=TRUE, stringsAsFactors=TRUE)
head(vache)
# Chunk 16
# Vérifions les effectifs par race
table(vache$race)
# Chunk 17
# Moyenne de la production par race
tapply(vache$prod_lait, vache$race, mean)
# Chunk 18
tapply(vache$prod_lait, vache$race, summary)
# Chunk 19
# Visualisation
boxplot(vache$prod_lait ~ vache$race, col=c("lightblue","lightgreen","orange"), ylab="Production de lait (L/jour)" ,  main = "Production journalière de lait selon la race")
bp <- boxplot(prod_lait ~ race, data = vache,
col = c("lightblue","lightgreen","orange"),
ylab = "Production de lait (L/jour)",
main = "Production journalière de lait selon la race")
# Chunk 20
# La fonction by sert a appliquer une fonction , ici shapiro.test sur un data frame et appliquer ce test sur les differents facteurs.
by(vache$prod_lait, vache$race, shapiro.test)
# Chunk 21
# On peut aussi utiliser data=vache pour eviter attach. ( ou remplacer vache$prod_lait)
bartlett.test(prod_lait ~ race, data=vache)
# Chunk 22
res <- aov(prod_lait ~ race, data=vache)
summary(res)
# Chunk 23
pairwise.t.test(vache$prod_lait, vache$race, p.adjust.method="bonferroni")
# Chunk 24
# install.packages("agricolae") # si non déjà installé
library(agricolae)
duncan.test(res, "race", alpha=0.05, console=TRUE)
# Chunk 1: setup
library(agricolae)
# Chunk 2: Exploration_jeu_de_donnes
resistance <- read.table("resistance.txt", header=T, stringsAsFactors=T); head(resistance) ; tail(resistance)
names(resistance)
table(resistance$lignee)
tapply(resistance$score, resistance$lignee , mean )
# va appliquer la fonction mean sur le score et les regrouper par lignees.
tapply(resistance$score, resistance$lignee, summary)
# va appliquer la fonction summary sur le score et les regrouper par lignees.
hist(resistance$score, breaks=15, ylab="effectifs" )
boxplot(resistance$score~resistance$lignee, col="green", ylab="score")
# Chunk 3: Tests_prealable_ANOVA
shapiro.test(resistance$score[resistance$lignee=="HM008"])
shapiro.test(resistance$score[resistance$lignee=="A17"] )
shapiro.test(resistance$score[resistance$lignee=="DZA45"])
shapiro.test(resistance$score[resistance$lignee=="HM013"])
# Ou on fait tapply
tapply(resistance$score, resistance$lignee , shapiro.test )
# Chunk 4
bartlett.test(resistance$score~resistance$lignee)
# Chunk 5: Test_Anova
res = aov(resistance$score~resistance$lignee) # Test ANOVA
summary(res) # Afficher tableau ANOVA.
# Df = degre de liberte
# sum square = somme ecart a la moyenne.
# Aire sous la courbe, p value = 1.18e-5.
# Chunk 6: visualiser_moyennees_chaque_groupe
model.tables(res)
tapply(resistance$score , resistance$lignee , mean) - mean(resistance$score) # Differences de la moyenne par rapport a moyenne generale.
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="A17"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="HM008"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
pairwise.t.test(resistance$score , resistance$lignee , pool.sd=F, p.adjust.method = "bonferroni" , var.equal=T)
# il va faire les tests 2 a 2
# bonferroni va multipliler les p values et diviser le seuil par le nombre de tests.
# Chunk 7
duncan.test(res, "lignee", alpha=0.01, console=T)
# Chunk 8
croissance <- read.table("croissance.txt", header=T, stringsAsFactors=T) ; head(croissance)
layout( matrix( c(1,2,3,3) , nrow=2, ncol=2, byrow = FALSE))
boxplot(croissance$hauteur~croissance$engrais, main="engrais", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature, main="temperature", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature+croissance$engrais, main="engrais-temperature", ylab="hauteur (cm)", las=3)
# Chunk 9
# remarque: pour sélectionner les lignes correspondant à une combinaison de facteur colonnes, on utilise "&":
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"])
# Chunk 10
bartlett.test(croissance$hauteur~interaction(croissance$temperature,croissance$engrais))
# Chunk 11
model1 <- aov(croissance$hauteur~croissance$temperature*croissance$engrais)
summary(model1)
interaction.plot(croissance$temperature, croissance$engrais, croissance$hauteur, main="interaction plot")
# Chunk 12
model2 <- aov(croissance$hauteur~croissance$temperature+croissance$engrais)
summary(model2)
# Chunk 13
anova(model1, model2)
# Chunk 14
# plantes avec "engrais" différents
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)     # comparaison A/B pour température "High"
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], var.equal=T) # comparaison A/B pour température "Medium"
# plantes avec "températures" différentes
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais A
t.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais B
# Chunk 15
# Lecture du fichier
vache <- read.table("vache.txt", header=TRUE, stringsAsFactors=TRUE)
head(vache)
# Chunk 16
# Vérifions les effectifs par race
table(vache$race)
# Chunk 17
# Moyenne de la production par race
tapply(vache$prod_lait, vache$race, mean)
# Chunk 18
tapply(vache$prod_lait, vache$race, summary)
# Chunk 19
# Visualisation
boxplot(vache$prod_lait ~ vache$race, col=c("lightblue","lightgreen","orange"), ylab="Production de lait (L/jour)" ,  main = "Production journalière de lait selon la race")
bp <- boxplot(prod_lait ~ race, data = vache,
col = c("lightblue","lightgreen","orange"),
ylab = "Production de lait (L/jour)",
main = "Production journalière de lait selon la race")
# Chunk 20
# La fonction by sert a appliquer une fonction , ici shapiro.test sur un data frame et appliquer ce test sur les differents facteurs.
by(vache$prod_lait, vache$race, shapiro.test)
# Chunk 21
# On peut aussi utiliser data=vache pour eviter attach. ( ou remplacer vache$prod_lait)
bartlett.test(prod_lait ~ race, data=vache)
# Chunk 22
res <- aov(prod_lait ~ race, data=vache)
summary(res)
# Chunk 23
pairwise.t.test(vache$prod_lait, vache$race, p.adjust.method="bonferroni")
# Chunk 24
# install.packages("agricolae") # si non déjà installé
duncan.test(res, "race", alpha=0.05, console=TRUE)
# Chunk 1: setup
library(agricolae)
# Chunk 2: Exploration_jeu_de_donnes
resistance <- read.table("resistance.txt", header=T, stringsAsFactors=T); head(resistance) ; tail(resistance)
names(resistance)
table(resistance$lignee)
tapply(resistance$score, resistance$lignee , mean )
# va appliquer la fonction mean sur le score et les regrouper par lignees.
tapply(resistance$score, resistance$lignee, summary)
# va appliquer la fonction summary sur le score et les regrouper par lignees.
hist(resistance$score, breaks=15, ylab="effectifs" )
boxplot(resistance$score~resistance$lignee, col="green", ylab="score")
# Chunk 3: Tests_prealable_ANOVA
shapiro.test(resistance$score[resistance$lignee=="HM008"])
shapiro.test(resistance$score[resistance$lignee=="A17"] )
shapiro.test(resistance$score[resistance$lignee=="DZA45"])
shapiro.test(resistance$score[resistance$lignee=="HM013"])
# Ou on fait tapply
tapply(resistance$score, resistance$lignee , shapiro.test )
# Chunk 4
bartlett.test(resistance$score~resistance$lignee)
# Chunk 5: Test_Anova
res = aov(resistance$score~resistance$lignee) # Test ANOVA
summary(res) # Afficher tableau ANOVA.
# Df = degre de liberte
# sum square = somme ecart a la moyenne.
# Aire sous la courbe, p value = 1.18e-5.
# Chunk 6: visualiser_moyennees_chaque_groupe
model.tables(res)
tapply(resistance$score , resistance$lignee , mean) - mean(resistance$score) # Differences de la moyenne par rapport a moyenne generale.
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
t.test(resistance$score[resistance$lignee=="DZA45"], resistance$score[resistance$lignee=="A17"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="HM008"], resistance$score[resistance$lignee=="HM013"], var.equal=T)
t.test(resistance$score[resistance$lignee=="A17"], resistance$score[resistance$lignee=="HM008"], var.equal=T)
pairwise.t.test(resistance$score , resistance$lignee , pool.sd=F, p.adjust.method = "bonferroni" , var.equal=T)
# il va faire les tests 2 a 2
# bonferroni va multipliler les p values et diviser le seuil par le nombre de tests.
# Chunk 7
duncan.test(res, "lignee", alpha=0.01, console=T)
# Chunk 8
croissance <- read.table("croissance.txt", header=T, stringsAsFactors=T) ; head(croissance)
layout( matrix( c(1,2,3,3) , nrow=2, ncol=2, byrow = FALSE))
boxplot(croissance$hauteur~croissance$engrais, main="engrais", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature, main="temperature", ylab="hauteur (cm)")
boxplot(croissance$hauteur~croissance$temperature+croissance$engrais, main="engrais-temperature", ylab="hauteur (cm)", las=3)
# Chunk 9
# remarque: pour sélectionner les lignes correspondant à une combinaison de facteur colonnes, on utilise "&":
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"])
shapiro.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"])
# Chunk 10
bartlett.test(croissance$hauteur~interaction(croissance$temperature,croissance$engrais))
# Chunk 11
model1 <- aov(croissance$hauteur~croissance$temperature*croissance$engrais)
summary(model1)
interaction.plot(croissance$temperature, croissance$engrais, croissance$hauteur, main="interaction plot")
# Chunk 12
model2 <- aov(croissance$hauteur~croissance$temperature+croissance$engrais)
summary(model2)
# Chunk 13
anova(model1, model2)
# Chunk 14
# plantes avec "engrais" différents
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)     # comparaison A/B pour température "High"
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], var.equal=T) # comparaison A/B pour température "Medium"
# plantes avec "températures" différentes
t.test(croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="A" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais A
t.test(croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="Medium"], croissance$hauteur[croissance$engrais=="B" & croissance$temperature=="High"], var.equal=T)   # comparaison High/Medium pour l'engrais B
# Chunk 15
# Lecture du fichier
vache <- read.table("vache.txt", header=TRUE, stringsAsFactors=TRUE)
head(vache)
# Chunk 16
# Vérifions les effectifs par race
table(vache$race)
# Chunk 17
# Moyenne de la production par race
tapply(vache$prod_lait, vache$race, mean)
# Chunk 18
tapply(vache$prod_lait, vache$race, summary)
# Chunk 19
# Visualisation
boxplot(vache$prod_lait ~ vache$race, col=c("lightblue","lightgreen","orange"), ylab="Production de lait (L/jour)" ,  main = "Production journalière de lait selon la race")
bp <- boxplot(prod_lait ~ race, data = vache,
col = c("lightblue","lightgreen","orange"),
ylab = "Production de lait (L/jour)",
main = "Production journalière de lait selon la race")
# Chunk 20
# La fonction by sert a appliquer une fonction , ici shapiro.test sur un data frame et appliquer ce test sur les differents facteurs.
by(vache$prod_lait, vache$race, shapiro.test)
# Chunk 21
# On peut aussi utiliser data=vache pour eviter attach. ( ou remplacer vache$prod_lait)
bartlett.test(prod_lait ~ race, data=vache)
# Chunk 22
res <- aov(prod_lait ~ race, data=vache)
summary(res)
# Chunk 23
pairwise.t.test(vache$prod_lait, vache$race, p.adjust.method="bonferroni")
# Chunk 24
# install.packages("agricolae") # si non déjà installé
duncan.test(res, "race", alpha=0.05, console=TRUE)
bp <- boxplot(prod_lait ~ race, data = vache,
col = c("lightblue","lightgreen","orange"),
ylab = "Production de lait (L/jour)",
main = "Production journalière de lait selon la race")
